---
title: "標準ベイズ統計学 -9. 線形回帰-"
subtitle: "ベイズ統計学勉強会 夏`22<br/>安藤 正和"
format:
  revealjs:
    theme: [beige, custom.scss]
    width: 1280
    height: 720
    slide-number: true
    chalkboard: false
    preview-links: auto
    logo: "../bayesjuku_2022summer/image/beyesjuku_logo.jpg"
    footer: "ベイズ統計学勉強会 夏`22"
    self-contained: true
    reference-location: document
engine: knitr
lang: ja
execute:
  cache: true
---

# はじめに

## 自己紹介

::: columns
::: {.column width="25%"}
![](image/ando_Roid.jpg){fig-align="center" width="300" height="300"}
:::

::: {.column width="75%"}
-   安藤正和([twitter](https://twitter.com/hirahira2835))
-   専修大学・大学院(心理学) → LINE株式会社(DS)
    -   LINE Payのデータ分析
:::
:::

# [前回](https://eitsupi.github.io/tokyorslide/tokyor_97/)のあらすじ

------------------------------------------------------------------------

巨大なデータを扱うときにはCSVではなくParquetを使うと便利です。

![](arrow_slide.jpg){fig-align="center" alt="前回発表スライド"}

## 今日の話

-   `dplyr`バックエンドの速度比較をやってみた。
-   `dtplyr`の日本語の情報が少ないので共有したい。
    -   [今こそ、data.tableを学ぼう！](https://speakerdeck.com/s_uryu/datatable1130)(2020-08-01)もご確認ください。

::: columns
::: {.column width="50%"}
### 対象かも

-   ✅`dplyr`派
-   ✅`dbplyr`や`dtplyr`を試す機会のなかった方
:::

::: {.column width="50%"}
### 対象外かも

-   ✅`data.table`派
:::
:::

# 結論

Q. `data.table`って速いの？

. . .

A. `dtplyr`ですぐに試せるのでやってみましょう！\
（`tidyverse`パッケージインストール時にインストールされてます！）

# `dtplyr`, `arrow`, `duckdb`

## `dplyr`バックエンド達

`dplyr`で記述したデータ操作を`dplyr`外で実行するパッケージ。

-   tydyverse[^1]
    -   [`multidplyr`](https://multidplyr.tidyverse.org/) : Rの計算を分散
    -   [`dtplyr`](https://dtplyr.tidyverse.org/) : [`data.table`](https://rdatatable.gitlab.io/data.table/)のクエリに変換して計算実行
    -   [`dbplyr`](https://dbplyr.tidyverse.org/) : [`duckdb`](https://duckdb.org/docs/api/r)などのDBにSQLを送信して計算実行
-   その他
    -   [`sparklyr`](https://spark.rstudio.com/) : SparkにSQLを送信して計算実行
    -   [`arrow`](https://arrow.apache.org/docs/r/) : Arrow C++ライブラリの計算エンジンAceroで計算実行

[^1]: [dplyr backends: multidplyr 0.1.0, dtplyr 1.1.0, dbplyr 2.1.0](https://www.tidyverse.org/blog/2021/02/dplyr-backends/)

## どれが速いか気になる！

-   `dtplyr`, `arrow`, `dbplyr`+`duckdb`は同じような目的（ローカル実行で集約計算などを速くしたい）で使用されます。
    -   [前回の発表](https://eitsupi.github.io/tokyorslide/tokyor_97/)で`arrow`と共に`duckdb`を紹介したところ、\
        「`duckdb`の使いどころが分からない」との感想をいただいた。
-   有名な[H2Oベンチマーク](https://h2oai.github.io/db-benchmark/)は最後の実行が2021年7月、 まだ`arrow`は`dplyr::summarise`を実行できなかった頃の結果。

# ベンチマーク

## 対象パッケージ

```{r}
#| echo: true

library(dplyr)
library(dtplyr)
library(arrow)
library(duckdb)
```

. . .

これらで、以下のようなグループ毎の集約計算を行います。

```{r}
#| echo: true

mtcars |>
  dplyr::group_by(cyl) |>
  dplyr::summarise(sum = sum(wt, na.rm = TRUE), .groups = "drop")
```

## 環境 {.smaller}

```{r}
sessionInfo()
```
